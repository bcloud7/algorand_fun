/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Algodice","structs":{},"methods":[{"name":"roll_always_lose","args":[{"type":"pay","name":"pay"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"roll_always_win","args":[{"type":"pay","name":"pay"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[178,208],"errorMessage":"Minimum bet size is 0.1 ALGO"},{"pc":[55,85,119],"errorMessage":"OnCompletion is not NoOp"},{"pc":[158],"errorMessage":"can only call when creating"},{"pc":[58,88,122],"errorMessage":"can only call when not creating"},{"pc":[171,200],"errorMessage":"payment sender must match transaction sender"},{"pc":[98,132],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDEwMDAwMCAxMDAwCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgQWxnb2RpY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A4CiAgICBwdXNoYnl0ZXNzIDB4MDMwYWZlZDkgMHhkNjZiOTFiYiAweDAyYmVjZTExIC8vIG1ldGhvZCAicm9sbF9hbHdheXNfbG9zZShwYXkpc3RyaW5nIiwgbWV0aG9kICJyb2xsX2Fsd2F5c193aW4ocGF5KXN0cmluZyIsIG1ldGhvZCAiaGVsbG8oc3RyaW5nKXN0cmluZyIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fcm9sbF9hbHdheXNfbG9zZV9yb3V0ZUAzIG1haW5fcm9sbF9hbHdheXNfd2luX3JvdXRlQDQgbWFpbl9oZWxsb19yb3V0ZUA1CgptYWluX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEFsZ29kaWNlKEFSQzRDb250cmFjdCk6CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX2hlbGxvX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6NDEKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEFsZ29kaWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjQxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgaGVsbG8KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JvbGxfYWx3YXlzX3dpbl9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBjbGFzcyBBbGdvZGljZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MzAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiByb2xsX2Fsd2F5c193aW4KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JvbGxfYWx3YXlzX2xvc2Vfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToyMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgQWxnb2RpY2UoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcm9sbF9hbHdheXNfbG9zZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEFsZ29kaWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEyCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hbGdvZGljZS5jb250cmFjdC5BbGdvZGljZS5yb2xsX2Fsd2F5c19sb3NlKHBheTogdWludDY0KSAtPiBieXRlczoKcm9sbF9hbHdheXNfbG9zZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToyMS0yMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcm9sbF9hbHdheXNfbG9zZShzZWxmLCBwYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBTdHJpbmc6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToyNC0yNQogICAgLy8gIyBWZXJpZnkgcGF5bWVudCB0cmFuc2FjdGlvbgogICAgLy8gYXNzZXJ0IHBheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgInBheW1lbnQgc2VuZGVyIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gcGF5bWVudCBzZW5kZXIgbXVzdCBtYXRjaCB0cmFuc2FjdGlvbiBzZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToyNgogICAgLy8gYXNzZXJ0IHBheS5hbW91bnQgPj0gMTAwMDAwLCAiTWluaW11bSBiZXQgc2l6ZSBpcyAwLjEgQUxHTyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBpbnRjXzEgLy8gMTAwMDAwCiAgICA+PQogICAgYXNzZXJ0IC8vIE1pbmltdW0gYmV0IHNpemUgaXMgMC4xIEFMR08KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weToyOAogICAgLy8gcmV0dXJuIFN0cmluZygiWW91IExvc2UiKQogICAgcHVzaGJ5dGVzICJZb3UgTG9zZSIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hbGdvZGljZS5jb250cmFjdC5BbGdvZGljZS5yb2xsX2Fsd2F5c193aW4ocGF5OiB1aW50NjQpIC0+IGJ5dGVzOgpyb2xsX2Fsd2F5c193aW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MzAtMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJvbGxfYWx3YXlzX3dpbihzZWxmLCBwYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBTdHJpbmc6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weTozMi0zMwogICAgLy8gIyBWZXJpZnkgcGF5bWVudCB0cmFuc2FjdGlvbgogICAgLy8gYXNzZXJ0IHBheS5zZW5kZXIgPT0gVHhuLnNlbmRlciwgInBheW1lbnQgc2VuZGVyIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gcGF5bWVudCBzZW5kZXIgbXVzdCBtYXRjaCB0cmFuc2FjdGlvbiBzZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hbGdvZGljZS9jb250cmFjdC5weTozNAogICAgLy8gYXNzZXJ0IHBheS5hbW91bnQgPj0gMTAwMDAwLCAiTWluaW11bSBiZXQgc2l6ZSBpcyAwLjEgQUxHTyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBkdXAKICAgIGludGNfMSAvLyAxMDAwMDAKICAgID49CiAgICBhc3NlcnQgLy8gTWluaW11bSBiZXQgc2l6ZSBpcyAwLjEgQUxHTwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjM1CiAgICAvLyBzZW5kX2Ftb3VudCA9IHBheS5hbW91bnQgKiBVSW50NjQoMikgKyBVSW50NjQoMTAwMCkKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAqCiAgICBpbnRjXzIgLy8gMTAwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2FsZ29kaWNlL2NvbnRyYWN0LnB5OjM2CiAgICAvLyBpdHhuLlBheW1lbnQoYW1vdW50PXNlbmRfYW1vdW50LCByZWNlaXZlcj1UeG4uc2VuZGVyLCBmZWU9MTAwMCkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpbnRjXzAgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzIgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6MzgKICAgIC8vIHJldHVybiBTdHJpbmcoIllvdSBXaW4iKQogICAgcHVzaGJ5dGVzICJZb3UgV2luIgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmFsZ29kaWNlLmNvbnRyYWN0LkFsZ29kaWNlLmhlbGxvKG5hbWU6IGJ5dGVzKSAtPiBieXRlczoKaGVsbG86CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6NDEtNDIKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIGhlbGxvKHNlbGYsIG5hbWU6IFN0cmluZykgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYWxnb2RpY2UvY29udHJhY3QucHk6NDMKICAgIC8vIHJldHVybiAiQWhhLCAiICsgbmFtZQogICAgcHVzaGJ5dGVzICJBaGEsICIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAaCNBugHJgEEFR98dTEbQQCBggMEAwr+2QTWa5G7BAK+zhE2GgCOAwBDACEAA4EAQzEZFEQxGEQ2GgFXAgCIAKpJFRZXBgJMUChMULAiQzEZFEQxGEQxFiIJSTgQIhJEiABYSRUWVwYCTFAoTFCwIkMxGRREMRhEMRYiCUk4ECISRIgAGUkVFlcGAkxQKExQsCJDMRlA/5YxGBREIkOKAQGL/zgAMQASRIv/OAgjD0SACFlvdSBMb3NliYoBAYv/OAAxABJEi/84CEkjD0SBAgskCLExALIHsggishAksgGzgAdZb3UgV2luiYoBAYAFQWhhLCCL/1CJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Algodice contract
 */
export type AlgodiceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'roll_always_lose(pay)string': {
      pay: AppMethodCallTransactionArgument
    }
    'roll_always_win(pay)string': {
      pay: AppMethodCallTransactionArgument
    }
    'hello(string)string': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'roll_always_lose(pay)string': [pay: AppMethodCallTransactionArgument]
    'roll_always_win(pay)string': [pay: AppMethodCallTransactionArgument]
    'hello(string)string': [name: string]
  }
}

/**
 * The return type for each method
 */
export type AlgodiceReturns = {
  'roll_always_lose(pay)string': string
  'roll_always_win(pay)string': string
  'hello(string)string': string
}

/**
 * Defines the types of available calls and state of the Algodice smart contract.
 */
export type AlgodiceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'roll_always_lose(pay)string' | 'roll_always_lose', {
      argsObj: AlgodiceArgs['obj']['roll_always_lose(pay)string']
      argsTuple: AlgodiceArgs['tuple']['roll_always_lose(pay)string']
      returns: AlgodiceReturns['roll_always_lose(pay)string']
    }>
    & Record<'roll_always_win(pay)string' | 'roll_always_win', {
      argsObj: AlgodiceArgs['obj']['roll_always_win(pay)string']
      argsTuple: AlgodiceArgs['tuple']['roll_always_win(pay)string']
      returns: AlgodiceReturns['roll_always_win(pay)string']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: AlgodiceArgs['obj']['hello(string)string']
      argsTuple: AlgodiceArgs['tuple']['hello(string)string']
      returns: AlgodiceReturns['hello(string)string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgodiceSignatures = keyof AlgodiceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgodiceNonVoidMethodSignatures = keyof AlgodiceTypes['methods'] extends infer T ? T extends keyof AlgodiceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Algodice smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgodiceSignatures> = AlgodiceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Algodice smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgodiceSignatures> = AlgodiceTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgodiceCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgodiceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgodiceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Algodice smart contract
 */
export abstract class AlgodiceParamsFactory {
  /**
   * Constructs a no op call for the roll_always_lose(pay)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rollAlwaysLose(params: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'roll_always_lose(pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pay],
    }
  }
  /**
   * Constructs a no op call for the roll_always_win(pay)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rollAlwaysWin(params: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'roll_always_win(pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pay],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Algodice smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgodiceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgodiceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgodiceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgodiceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Algodice smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgodiceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AlgodiceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algodice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algodice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algodice smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AlgodiceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Algodice smart contract
 */
export class AlgodiceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgodiceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Algodice app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgodiceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgodiceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgodiceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgodiceClient> {
    return new AlgodiceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgodiceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgodiceClient> {
    return new AlgodiceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Algodice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_lose(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rollAlwaysLose: (params: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgodiceParamsFactory.rollAlwaysLose(params))
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_win(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rollAlwaysWin: (params: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgodiceParamsFactory.rollAlwaysWin(params))
    },

    /**
     * Makes a call to the Algodice smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgodiceParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Algodice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_lose(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rollAlwaysLose: (params: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgodiceParamsFactory.rollAlwaysLose(params))
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_win(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rollAlwaysWin: (params: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgodiceParamsFactory.rollAlwaysWin(params))
    },

    /**
     * Makes a call to the Algodice smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgodiceParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Algodice smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_lose(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rollAlwaysLose: async (params: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgodiceParamsFactory.rollAlwaysLose(params))
      return {...result, return: result.return as unknown as (undefined | AlgodiceReturns['roll_always_lose(pay)string'])}
    },

    /**
     * Makes a call to the Algodice smart contract using the `roll_always_win(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rollAlwaysWin: async (params: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgodiceParamsFactory.rollAlwaysWin(params))
      return {...result, return: result.return as unknown as (undefined | AlgodiceReturns['roll_always_win(pay)string'])}
    },

    /**
     * Makes a call to the Algodice smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgodiceParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | AlgodiceReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgodiceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Algodice app
   */
  state = {
  }

  public newGroup(): AlgodiceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a roll_always_lose(pay)string method call against the Algodice contract
       */
      rollAlwaysLose(params: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rollAlwaysLose(params)))
        resultMappers.push((v) => client.decodeReturnValue('roll_always_lose(pay)string', v))
        return this
      },
      /**
       * Add a roll_always_win(pay)string method call against the Algodice contract
       */
      rollAlwaysWin(params: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rollAlwaysWin(params)))
        resultMappers.push((v) => client.decodeReturnValue('roll_always_win(pay)string', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the Algodice contract
       */
      hello(params: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the Algodice contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgodiceComposer
  }
}
export type AlgodiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the roll_always_lose(pay)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rollAlwaysLose(params?: CallParams<AlgodiceArgs['obj']['roll_always_lose(pay)string'] | AlgodiceArgs['tuple']['roll_always_lose(pay)string']>): AlgodiceComposer<[...TReturns, AlgodiceReturns['roll_always_lose(pay)string'] | undefined]>

  /**
   * Calls the roll_always_win(pay)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rollAlwaysWin(params?: CallParams<AlgodiceArgs['obj']['roll_always_win(pay)string'] | AlgodiceArgs['tuple']['roll_always_win(pay)string']>): AlgodiceComposer<[...TReturns, AlgodiceReturns['roll_always_win(pay)string'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<AlgodiceArgs['obj']['hello(string)string'] | AlgodiceArgs['tuple']['hello(string)string']>): AlgodiceComposer<[...TReturns, AlgodiceReturns['hello(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Algodice smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgodiceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgodiceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgodiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgodiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgodiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgodiceComposerResults<TReturns>>
}
export type AlgodiceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


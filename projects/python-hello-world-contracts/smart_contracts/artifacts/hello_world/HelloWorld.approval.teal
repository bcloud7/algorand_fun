#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1
    bytecblock 0x151f7c75
    // smart_contracts/hello_world/contract.py:17
    // class HelloWorld(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x23950027 0x02bece11 // method "payment()uint64", method "hello(string)string"
    txna ApplicationArgs 0
    match main_payment_route@3 main_hello_route@4

main_after_if_else@11:
    // smart_contracts/hello_world/contract.py:17
    // class HelloWorld(ARC4Contract):
    pushint 0 // 0
    return

main_hello_route@4:
    // smart_contracts/hello_world/contract.py:24
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:17
    // class HelloWorld(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/hello_world/contract.py:24
    // @abimethod()
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_payment_route@3:
    // smart_contracts/hello_world/contract.py:19
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub payment
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // smart_contracts/hello_world/contract.py:17
    // class HelloWorld(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.hello_world.contract.HelloWorld.payment() -> uint64:
payment:
    // smart_contracts/hello_world/contract.py:21
    // result = itxn.Payment(amount=5000, receiver=Txn.sender, fee=1000).submit()
    itxn_begin
    txn Sender
    itxn_field Receiver
    pushint 5000 // 5000
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    pushint 1000 // 1000
    itxn_field Fee
    itxn_submit
    itxn Amount
    // smart_contracts/hello_world/contract.py:22
    // return result.amount
    retsub


// smart_contracts.hello_world.contract.HelloWorld.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/hello_world/contract.py:24-25
    // @abimethod()
    // def hello(self, name: String) -> String:
    proto 1 1
    // smart_contracts/hello_world/contract.py:26
    // return "My Hello, " + name
    pushbytes "My Hello, "
    frame_dig -1
    concat
    retsub
